{"version":3,"sources":["Components/Instructions.js","Components/Image.js","Components/Gallery.js","Components/Overlay.js","Components/App.js","serviceWorker.js","index.js"],"names":["Container","styled","aside","OrderedList","ol","Instructions","StyledImage","img","Image","props","id","src","alt","onClick","main","Title","h1","Pictures","div","Gallery","IMAGE_LIST","map","imgId","altTag","replace","_","$1","key","imageClicked","Modal","setAppElement","Overlay","handleTyping","element","value","document","getElementById","textContent","className","isOpen","isModalOpen","onRequestClose","setIsModalOpen","style","overlay","backgroundColor","htmlFor","type","placeholder","onChange","e","target","class","memeUrl","App","useState","setMemeUrl","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f846ffa9.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.aside`\n  position: fixed;\n  display: inline-block;\n  width: 100vw;\n  height: auto;\n  background-color: green;\n  text-align: center;\n  overflow-wrap: break-word;\n  hr {\n    border: 2px solid lightgreen;\n    border-radius: 25px;\n    margin: 10px auto;\n  }\n  p {\n    font-size: 1.4em;\n  }\n\n  @media screen and (min-width: 600px) {\n    width: 25vw;\n    height: 100vh;\n  }\n`\n\nconst OrderedList = styled.ol`\n  list-style: none;\n  counter-reset: count;\n  font-size: 1.4em;\n  padding: 0 0 0 10%;\n  text-align: left;\n  line-height: 2em;\n  li {\n    margin: 20px 30px;\n    counter-increment: count;\n  }\n  li::before {\n    content: counter(count) \". \";\n    position: absolute;\n    left: 25px;\n    // height: 30px;\n    transform: rotate(-5deg);\n    background-color: black;\n    color: gold;\n    padding: 5px;\n    border-radius: 50%;\n    box-shadow: 1px 2px 5px gold;\n    font-weight: bold;\n  }\n`\n\nfunction Instructions() {\n  return (\n    <Container>\n      <h2>Build Your Own Meme</h2>\n      <hr />\n      <p>Create your own meme by following these easy steps.</p>\n      <OrderedList>\n        <li>Click on an image</li>\n        <li>Write in your text</li>\n        <li>Something else</li>\n        <li>Make these fancy using css counting...</li>\n      </OrderedList>\n      <p>\n        Lorem ipsum............abs blah blah blah; `npm audit fix` to\n        fix them, or `npm audit` for details Shauns-MBP:meme-builder sgedye$ psd\n        bash: psd: command not found Shauns-MBP:meme-builder sgedye$ pwd\n        /Users/sgedye/Documents/_Entrepreneurship/projects/react/meme-builder\n        Shauns-MBP:meme-builder sgedye$\n      </p>\n    </Container>\n  )\n}\n\nexport default Instructions\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledImage = styled.img`\n  width: 200px;\n  height: 200px;\n  margin: 10px;\n`\n\nexport default function Image(props) {\n  return (\n    <div>\n      <StyledImage id={props.id} src={props.src} alt={props.alt} onClick={props.onClick} />\n    </div>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport Image from './Image'\n\nconst Container = styled.main`\n  display: inline-block;\n  width: 100vw;\n  min-height: auto;\n  margin: 0 auto;\n  @media screen and (min-width: 600px) {\n    width: 75vw;\n    min-height: 100vh;\n    margin-left: 25vw;\n  }\n`\nconst Title = styled.h1`\n  margin: 20px 0;\n  width: 100%;\n  text-align: center;\n`\nconst Pictures = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`\n\nfunction Gallery(props) {\n\n  const imageData = [\n    { id:1, src:'http://rtgphotography.com.au/img/galleries/cuba.jpg' },\n    { id:2, src:'http://rtgphotography.com.au/img/galleries/ethiopia.jpg' },\n    { id:3, src:'http://rtgphotography.com.au/img/galleries/madagascar.jpg' },\n    { id:4, src:'http://rtgphotography.com.au/img/galleries/landscapes.jpg' },\n    { id:5, src:'http://rtgphotography.com.au/img/galleries/portraits-1.jpg' },\n    { id:6, src:'http://rtgphotography.com.au/img/galleries/portraits-2.jpg' },\n    { id:7, src:'http://rtgphotography.com.au/img/galleries/black&whites.jpg' }\n  ]\n\n  const IMAGE_LIST = imageData.map(img => {\n    const imgId = 'img_' + img.id\n    const altTag = img.src.replace(/.*\\/(\\w+[-|&]?\\w+)\\.jpg/, (_, $1) => $1)\n    return (\n      <Image key={imgId} id={imgId} src={img.src} alt={altTag} onClick={() => props.imageClicked(img.src)} />\n    )\n  })\n  return (\n    <Container>\n      <Title>Image Gallery</Title>\n      <Pictures id=\"gallery-body\">{IMAGE_LIST}</Pictures>\n    </Container>\n  )\n}\n\nexport default Gallery\n\n\n\n// import { createClient } from 'pexels';\n\n// All requests made with the client will be authenticated\n\n\n  // UNSECURE API call to get images \n  /* \n  const client = createClient(process.env.REACT_APP_PEXELS_API_KEY);\n  console.log(client)\n\n  console.log(process.env.REACT_APP_PEXELS_API_KEY)\n  client.photos.show({ id: 2014422 })\n    .then(photo => { console.log(photo) })\n  \n  \n  let x =client.photos.random()\n  const getX = () => console.log(x)\n  setInterval(() => {\n    getX()\n  }, 1000);\n  const query = 'Nature';\n  client.photos.search({ query, per_page: 1 })\n    .then(photos => { console.log(photos)});\n  */","import React, { useState } from \"react\"\n\nimport Modal from \"react-modal\"\nModal.setAppElement(\"#root\")\n\nfunction Overlay(props) {\n  const handleTyping = (element, value) => {\n    document.getElementById(element).textContent = value\n  }\n\n  return (\n    <Modal\n      className=\"modal\"\n      isOpen={props.isModalOpen}\n      onRequestClose={() => props.setIsModalOpen(false)}\n      style={{\n        overlay: { backgroundColor: \"grey\" },\n        // content: { color: \"purple\" },\n      }}\n    >\n      <h1>Create a Meme</h1>\n      <form className=\"modal-form\">\n        <label htmlFor=\"topLine\">Line One:</label>\n        <input\n          type=\"text\"\n          id=\"topLine\"\n          placeholder=\"Add text to the top\"\n          onChange={(e) => handleTyping(\"meme-text-top\", e.target.value)}\n        />\n        <label htmlFor=\"bottomLine\">Line Two:</label>\n        <input\n          type=\"text\"\n          id=\"topLine\"\n          placeholder=\"Add text to the bottom\"\n          onChange={(e) => handleTyping(\"meme-text-bottom\", e.target.value)}\n        />\n      </form>\n      <div class=\"meme-image\">\n        <img src={props.memeUrl} alt=\"meme to create\" />\n        <p id=\"meme-text-top\"></p>\n        <p id=\"meme-text-bottom\"></p>\n      </div>\n      <button className=\"modal-download\">download</button>\n      <button className=\"modal-close\" onClick={() => props.setIsModalOpen(false)}>x</button>\n    </Modal>\n  )\n}\n\nexport default Overlay\n\n\n\n      ","import React, { useState } from \"react\"\nimport Instructions from './Instructions'\nimport Gallery from './Gallery'\nimport Overlay from './Overlay'\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [memeUrl, setMemeUrl] = useState(\"\")\n\n  const imageClicked = (id) => {\n    setMemeUrl(id)\n    setIsModalOpen(true)\n  }\n\n  return (\n    <div id=\"app\">\n      <Instructions />\n      <Gallery imageClicked={imageClicked} />\n      <Overlay\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        memeUrl={memeUrl}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}