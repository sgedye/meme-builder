{"version":3,"sources":["Components/Instructions.js","Components/Image.js","Components/Gallery.js","Components/EntryInput.js","Components/Overlay.js","Components/App.js","serviceWorker.js","index.js"],"names":["Container","styled","aside","OrderedList","ol","Instructions","style","fontSize","StyledImage","img","Image","props","id","src","alt","onClick","main","Title","h1","Refresher","button","Pictures","div","Canvas","canvas","Button","Gallery","useState","refresh","setRefresh","galleryImages","setGalleryImages","useEffect","fetch","then","response","json","blob","ids","Array","map","entry","Math","floor","random","Set","size","tempId","includes","push","imgs","data","memes","filter","value","index","item","key","url","name","imageClicked","document","getElementById","textContent","display","Adjustments","EntryInput","className","htmlFor","inputId","children","type","placeholder","onChange","e","handleTextInput","outputId","target","handleFontSize","handleRotation","handleCapitalise","checked","Modal","setAppElement","Overlay","rotateTop","setRotateTop","rotateBottom","setRotateBottom","body","position","isModalOpen","textInput","element","changeCase","textToAdjust","toUpperCase","toLowerCase","adjustLine","preventDefault","adjustor","parentElement","styleFont","parseFloat","window","getComputedStyle","getPropertyValue","adjustFontSize","prevState","transform","adjustRotation","drawText","ctx","textId","rotation","Number","replace","font","fillStyle","shadowColor","shadowBlur","translate","width","height","rotate","PI","textAlign","content","fillText","isOpen","onRequestClose","setIsModalOpen","overlay","backgroundColor","memeUrl","getContext","drawImage","createCanvas","App","setMemeUrl","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f957430.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.aside`\n  position: fixed;\n  display: none; // No mobile instructions !!!\n  width: 100vw;\n  height: auto;\n  background-color: green;\n  text-align: center;\n  overflow-wrap: break-word;\n  hr {\n    border: 2px solid lightgreen;\n    border-radius: 25px;\n    margin: 10px auto;\n  }\n  p {\n    font-size: 1.4em;\n  }\n\n  @media screen and (min-width: 600px) {\n    display: inline-block;\n    width: 30vw;\n    height: 100vh;\n  }\n`\n\nconst OrderedList = styled.ol`\n  list-style: none;\n  counter-reset: count;\n  font-size: 1.4em;\n  padding: 0 0 0 10%;\n  text-align: left;\n  line-height: 2em;\n  li {\n    margin: 20px;\n    counter-increment: count;\n  }\n  li::before {\n    content: counter(count) \". \";\n    position: absolute;\n    left: 25px;\n    transform: rotate(-5deg);\n    background-color: black;\n    color: gold;\n    padding: 5px;\n    border-radius: 50%;\n    box-shadow: 1px 2px 5px gold;\n    font-weight: bold;\n  }\n`\n\nfunction Instructions() {\n  return (\n    <Container>\n      <h2 style={{ fontSize: \"2.2em\" }}>Build Your Own Meme</h2>\n      <hr />\n      <p>Create your own meme by following these easy steps.</p>\n      <OrderedList>\n        <li>Click on an image</li>\n        <li>Write your text</li>\n        <li>Adjust the settings</li>\n        <li>Click download</li>\n        <li>Right click on your meme</li>\n        <li>Select \"Save Image As...\"</li>\n        <li>Click \"Return to Gallery\" to create another meme</li>\n      </OrderedList>\n    </Container>\n  )\n}\n\nexport default Instructions\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledImage = styled.img`\n  width: 200px;\n  height: 200px;\n  margin: 10px;\n`\n\nexport default function Image(props) {\n  return (\n    <div>\n      <StyledImage id={props.id} src={props.src} alt={props.alt} onClick={props.onClick} />\n    </div>\n  )\n}","import React, {useState, useEffect} from 'react'\nimport styled from 'styled-components'\nimport { IoMdRefresh } from \"react-icons/io\";\n\nimport Image from './Image'\n\nconst Container = styled.main`\n  display: inline-block;\n  width: 100vw;\n  height: auto;\n  margin: 0 auto;\n  text-align: center;\n  @media screen and (min-width: 600px) {\n    width: 70vw;\n    margin-left: 30vw;\n  }\n`\nconst Title = styled.h1`\n  margin: 20px 0;\n  width: 100%;\n  text-align: center;\n  font-size: 3em;\n  text-shadow: -1px -1px floralwhite, 3px 5px 5px floralwhite;\n`\nconst Refresher = styled.button`\n  position: absolute;\n  margin: 0px auto 10px auto;\n  padding: 5px;\n  height: 33px;\n  min-width: 40px;\n  background-color: #4f9ab3;\n  border-radius: 20px;\n  font-weight: bold;\n  font-size: 1.2em;\n  right: 20px;\n  top: 40px;\n  span { display: none; }\n  svg { \n    display: inline;\n  }\n  @media screen and (min-width: 600px) {\n    height: 36px;\n    padding: 5px 15px;\n    span { display: inline; }\n    svg { display: none; }\n  }\n`\nconst Pictures = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`\nconst Canvas = styled.canvas`\n  display: none;\n  margin: 20px auto;\n  max-width: 90vw;\n`\nconst Button = styled.button`\n  display: none;\n  margin: 0 auto;\n`\n\nfunction Gallery(props) {\n  \n  const [refresh, setRefresh] = useState(true)\n  const [galleryImages, setGalleryImages] = useState([])\n\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(response => \n      response.json().then(blob => {\n        const ids = [...Array(12)].map(entry => Math.floor(Math.random() * 100))\n        while ((new Set(ids)).size < 12) {\n          const tempId = Math.floor(Math.random() * 100)\n          if (!ids.includes(tempId)) {\n            ids.push(tempId)\n          }\n        }\n        const imgs = blob.data.memes.filter((value, index) => ids.includes(index))\n        setGalleryImages(imgs)\n      })\n    )\n  }, [refresh])\n\n  const returnToGallery = () => {\n    document.getElementById(\"gallery-title\").textContent = \"Gallery\"\n    document.getElementById(\"gallery-body\").style.display = \"flex\"\n    document.getElementById(\"gallery-refresh\").style.display = \"block\"\n    document.getElementById(\"return-to-gallery\").style.display = \"none\"\n    document.getElementById(\"memeToDownload\").style.display = \"none\"\n  }\n\n  return (\n    <Container id=\"gallery\">\n      <Title id=\"gallery-title\">Gallery</Title>\n      <Refresher id=\"gallery-refresh\" onClick={() => setRefresh(!refresh)}>\n        <span>Get new images</span>\n        <IoMdRefresh />\n      </Refresher>\n      <Pictures id=\"gallery-body\">\n        {\n          galleryImages.map(item => {\n            return (\n              <Image\n                key={item.id}\n                id={item.id}\n                src={item.url}\n                alt={item.name}\n                onClick={() => props.imageClicked(item.url)}\n              />\n            )\n          })\n        }\n      </Pictures>\n      <Canvas id=\"memeToDownload\"></Canvas>\n      <Button id=\"return-to-gallery\" onClick={returnToGallery}>Return to Gallery</Button>\n    </Container>\n  )\n}\n\nexport default Gallery","import React from 'react'\nimport styled from \"styled-components\"\nimport { TiPlus, TiMinus } from \"react-icons/ti\"\nimport { GiAnticlockwiseRotation, GiClockwiseRotation } from \"react-icons/gi\"\n\nconst Adjustments = styled.div`\n  display: inline-block;\n  button {\n    display: inline-block;\n    align-items: center;\n  }\n  button:first-of-type {\n    margin-right: 10px;\n  }\n  p {\n    display: none;\n    padding: 0 10px;\n  }\n  @media screen and (min-width: 600px) {\n    button:first-of-type { margin-right: 0; }\n    p { display: inline-block; }\n  }\n`\n\nfunction EntryInput(props) {  \n  return (\n    <div className=\"entryGrid\">\n      <label htmlFor={props.inputId}>{props.children}</label>\n      <input\n        type=\"text\"\n        id={props.inputId}\n        placeholder=\"Add text to the top\"\n        onChange={(e) => props.handleTextInput(props.outputId, e.target)}\n      />\n      <Adjustments id=\"font-sizing\">\n        <button\n          value=\"font++\"\n          onClick={(e) => props.handleFontSize(props.outputId, e)}\n        >\n          <TiPlus />\n        </button>\n        <p>Font Size</p>\n        <button\n          value=\"font--\"\n          onClick={(e) => props.handleFontSize(props.outputId, e)}\n        >\n          <TiMinus />\n        </button>\n      </Adjustments>\n      <Adjustments id=\"rotation\">\n        <button\n          value=\"rRight\"\n          onClick={(e) => props.handleRotation(props.outputId, e)}\n        >\n          <GiAnticlockwiseRotation />\n        </button>\n        <p>Rotate</p>\n        <button\n          value=\"rLeft\"\n          onClick={(e) => props.handleRotation(props.outputId, e)}\n        >\n          <GiClockwiseRotation />\n        </button>\n      </Adjustments>\n      <Adjustments className=\"checkbox\">\n        <label htmlFor={`${props.inputId}-check`}>SHOUT</label>\n        <input\n          id={`${props.inputId}-check`}\n          type=\"checkbox\"\n          onClick={(e) =>\n            props.handleCapitalise(props.outputId, e.target.checked)\n          }\n        />\n      </Adjustments>\n    </div>\n  )\n}\n\nexport default EntryInput\n","import React, { useState } from \"react\"\nimport Modal from \"react-modal\"\nimport { IoMdCloseCircle } from \"react-icons/io\"\n\nimport EntryInput from \"./EntryInput\"\n\nModal.setAppElement(\"#root\")\n\nfunction Overlay(props) {\n\n  const [rotateTop, setRotateTop] = useState(0)\n  const [rotateBottom, setRotateBottom] = useState(0)\n  // const [offsetX, setOffsetX] = useState(0)\n  // const [offsetY, setOffsetY] = useState(0)\n\n\n  document.body.style.position = props.isModalOpen ? 'fixed' : ''\n\n  const textInput = (element, target) => {\n    document.getElementById(element).textContent = target.value\n    const checkBox = document.getElementById(target.id + \"-check\")\n    checkBox.checked = false\n  }\n\n  const adjustFontSize = (textToAdjust, adjustor) => {\n    let styleFont = parseFloat(\n      window.getComputedStyle(textToAdjust, null).getPropertyValue(\"font-size\")\n    )\n    styleFont += adjustor === \"font++\" ? 2 : -2\n    textToAdjust.style.fontSize = `${styleFont}px`\n  }\n\n  const adjustRotation = (textToAdjust, adjustor) => {\n    if (textToAdjust.id === \"meme-text-top\") {\n      adjustor === \"rLeft\"\n        ? setRotateTop((prevState) => prevState + 10)\n        : setRotateTop((prevState) => prevState - 10)\n      textToAdjust.style.transform = `rotate(${rotateTop}deg)`\n    } else {\n      adjustor === \"rLeft\"\n        ? setRotateBottom((prevState) => prevState + 10)\n        : setRotateBottom((prevState) => prevState - 10)\n      textToAdjust.style.transform = `rotate(${rotateBottom}deg)`\n    }\n  }\n\n  const changeCase = (element, checked) => {\n    const textToAdjust = document.getElementById(element)\n    textToAdjust.textContent = checked \n      ? textToAdjust.textContent.toUpperCase()\n      : textToAdjust.textContent.toLowerCase()\n  }\n\n  const adjustLine = (element, e) => {\n    e.preventDefault()\n    const adjustor =\n      e.target.value ||\n      e.target.parentElement.value ||\n      e.target.parentElement.parentElement.value\n    const textToAdjust = document.getElementById(element)\n    if (adjustor === 'font++' || adjustor === 'font--') {\n      adjustFontSize(textToAdjust, adjustor)\n    } else if (adjustor === 'rLeft' || adjustor === 'rRight') {\n      adjustRotation(textToAdjust, adjustor)\n    }\n  }\n  \n  function drawText(canvas, ctx, textId) {\n    const element = document.getElementById(textId)\n    const fontSize = parseFloat(\n      window.getComputedStyle(element, null).getPropertyValue(\"font-size\")\n    )\n    const rotation = Number(element.style.transform.replace(/[^-0-9]/g, \"\"))\n    ctx.font = `${fontSize}px Impact`\n    ctx.fillStyle = \"white\"\n    ctx.shadowColor = \"black\"\n    ctx.shadowBlur = 6\n    ctx.translate(canvas.width / 2, canvas.height / 2)\n    ctx.rotate((rotation * Math.PI) / 180)\n    ctx.translate(-canvas.width / 2, -canvas.height / 2)\n    ctx.textAlign = \"center\"\n    \n    const checkBox = textId === \"meme-text-top\"\n      ? document.getElementById(`topLine-check`)\n      : document.getElementById(`bottomLine-check`) \n    const content = checkBox.checked\n      ? element.textContent.toUpperCase()\n      : element.textContent\n    textId === \"meme-text-top\"\n      ? ctx.fillText(content, canvas.width / 2, 100)\n      : ctx.fillText(content, canvas.width / 2, canvas.height - 100)\n  }\n\n  function createCanvas(e) {\n    e.preventDefault()\n    const canvas = document.getElementById('memeToDownload')\n    const ctx = canvas.getContext(\"2d\")\n    const img = document.getElementById(\"meme-image\")\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n    \n    drawText(canvas, ctx, \"meme-text-top\")\n    drawText(canvas, ctx, \"meme-text-bottom\")\n\n    document.getElementById(\"gallery-title\").textContent = \"Your Meme\"\n    document.getElementById(\"gallery-body\").style.display = \"none\"\n    canvas.style.display = \"block\"\n    document.getElementById('gallery-refresh').style.display = \"none\"\n    document.getElementById('return-to-gallery').style.display = \"block\"\n    props.setIsModalOpen(false)\n  }\n\n\n\n\n\n//   setTimeout(() => {\n//     dragElement();\n//   }, 2000);\n\n//   function dragElement() {\n//     var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n//     document.getElementById(\"meme-text-bottom\").onMouseDown = dragMouseDown;\n\n//     function dragMouseDown(e) {\n//       e = e || window.event;\n//       e.preventDefault();\n//       e.nativeEvent.srcElement.draggable = true\n//       // get the mouse cursor position at startup:\n//       pos3 = e.clientX;\n//       pos4 = e.clientY;\n//       document.onmouseup = closeDragElement;\n//       // call a function whenever the cursor moves:\n//       document.onmousemove = elementDrag;\n//     }\n\n//     function elementDrag(e) {\n//       e = e || window.event;\n//       e.preventDefault();\n//       // calculate the new cursor position:\n//       pos1 = pos3 - e.clientX;\n//       pos2 = pos4 - e.clientY;\n//       pos3 = e.clientX;\n//       pos4 = e.clientY;\n//       // set the element's new position:\n//       document.getElementById(\"meme-text-bottom\").style.top = (document.getElementById(\"meme-text-bottom\").offsetTop - pos2) + \"px\";\n//       document.getElementById('meme-text-bottom').style.left = (document.getElementById(\"meme-text-bottom\").offsetLeft - pos1) + \"px\";\n//     }\n\n//     function closeDragElement() {\n//       // stop moving when mouse button is released:\n//       document.onmouseup = null;\n//       document.onmousemove = null;\n//     }\n//   }\n\n\n\n\n\n\n\n//   // const xxx = document.querySelector('.meme-text')\n//   // xxx.onmousedown = //\n\n//   // const handleMouseEvents = () => {\n\n//   // }\n\n//   // const handleMouseDown = (e) => {\n//   //   console.log(e, e.value)\n//   // }\n// // onMouseDown = { event => this.handleMouseDown(event, ‘top’) }\n//   // onMouseUp = { event => this.handleMouseUp(event, ‘top’) }\n\n//   const mouseDown = e => {\n//     e.preventDefault()\n//     console.log(e.target, e.nativeEvent)\n//     // const selectedText = e.target\n//     // setTimeout(() => {\n//     //   selectedText.style.display = \"none\"\n//     // }, 1110)\n//   }\n\n//   const mouseMove = e => {\n//     const {target, clientWidth, clientHeight} = document.getElementById('meme-image')\n//     setOffsetX(Math.floor((e.nativeEvent.offsetX / clientWidth) * 100))\n//     setOffsetY(Math.floor((e.nativeEvent.offsetY / clientHeight) * 100))\n//     console.log(document.getElementById('meme-image'), document.getElementById('meme-image').clientHeight)\n\n//     console.log(document.getElementById('meme-image').nextSibling)\n\n\n//     console.log(offsetX, offsetY)\n//     console.log(clientWidth, clientHeight)\n//       // console.log(e.nativeEvent.srcElement)\n//       // // e.nativeEvent.target = document.getElementById('meme-image')\n//       // console.log(e.nativeEvent.target)\n//       e.nativeEvent.srcElement.draggable = true\n//       // console.log(e.nativeEvent)\n//       // console.log(e.nativeEvent.target)\n//       // console.log(e.nativeEvent.srcElement.draggable)\n//   }\n\n//   const mouseUp = e => {\n//     e.preventDefault()\n//     console.log(offsetX, offsetY)\n//   }\n\n  return (\n    <Modal\n      className=\"modal\"\n      isOpen={props.isModalOpen}\n      onRequestClose={() => props.setIsModalOpen(false)}\n      style={{\n        overlay: { backgroundColor: \"grey\" },\n        // content: { color: \"purple\" },\n      }}\n    >\n      <h1 id=\"create-meme\">Create a Meme</h1>\n      <form className=\"modal-form\">\n        <EntryInput\n          inputId=\"topLine\"\n          outputId=\"meme-text-top\"\n          handleTextInput={textInput}\n          handleFontSize={adjustLine}\n          handleRotation={adjustLine}\n          handleCapitalise={changeCase}\n        >\n          Top Line\n        </EntryInput>\n      </form>\n      <div className=\"meme-image-div\">\n        <img id=\"meme-image\" src={props.memeUrl} alt=\"meme to create\" />\n        <p\n          id=\"meme-text-top\"\n          className=\"meme-text\" /*onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseMove={mouseMove}*/\n        ></p>\n        <p\n          id=\"meme-text-bottom\"\n          className=\"meme-text\" /*onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseMove={mouseMove}*/\n        ></p>\n      </div>\n      <form className=\"modal-form\">\n        <EntryInput\n          inputId=\"bottomLine\"\n          outputId=\"meme-text-bottom\"\n          handleTextInput={textInput}\n          handleFontSize={adjustLine}\n          handleRotation={adjustLine}\n          handleCapitalise={changeCase}\n        >\n          Bottom Line\n        </EntryInput>\n      </form>\n      <button className=\"modal-download\" onClick={(e) => createCanvas(e)}>\n        download\n      </button>\n      <IoMdCloseCircle\n        className=\"modal-close\"\n        onClick={() => props.setIsModalOpen(false)}\n      />\n    </Modal>\n  )\n}\n\nexport default Overlay\n\n\n","import React, { useState } from \"react\"\nimport Instructions from './Instructions'\nimport Gallery from './Gallery'\nimport Overlay from './Overlay'\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [memeUrl, setMemeUrl] = useState(\"\")\n\n  const imageClicked = (id) => {\n    setMemeUrl(id)\n    setIsModalOpen(true)\n  }\n\n  return (\n    <div id=\"app\">\n      <Instructions />\n      <Gallery\n        imageClicked={imageClicked}\n      />\n      <Overlay\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        memeUrl={memeUrl}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}